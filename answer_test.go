package toydns_test

import (
	"testing"
	"toydns"
)

// go test -v -run TestDecodeCompressedDomain
func TestDecodeCompressedDomain(t *testing.T) {
	response := []byte{
		// Header
		0x12, 0x34, // Transaction ID
		0x81, 0x80, // QR = 1 (Response), Standard Query
		0x00, 0x01, // QDCOUNT = 1
		0x00, 0x06, // ANCOUNT = 6
		0x00, 0x00, // NSCOUNT = 0
		0x00, 0x00, // ARCOUNT = 0

		// Question Section
		// Name: google.com
		0x06, 'g', 'o', 'o', 'g', 'l', 'e',
		0x03, 'c', 'o', 'm',
		0x00,       // End of domain
		0x00, 0x01, // QTYPE = A
		0x00, 0x01, // QCLASS = IN

		// Answer Section
		// 1
		0xC0, 0x0C, // Name (compress pointer to domain)
		0x00, 0x01, // Type = A
		0x00, 0x01, // Class = IN
		0x00, 0x00, 0x00, 0xB3, // TTL = 179
		0x00, 0x04, // RDLENGTH = 4
		0x8E, 0xFB, 0xAF, 0x64, // 142.251.175.100

		// 2
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x8B, // 142.251.175.139

		// 3
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x71, // 142.251.175.113

		// 4
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x66, // 142.251.175.102

		// 5
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x8A, // 142.251.175.138

		// 6
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x65, // 142.251.175.101
	}
	// Question
	domain_1, move := toydns.DecodeCompressedDomain(response[12:], response)
	if domain_1 != "google.com" {
		t.Fatalf("doamin_1 parse error")
	}
	if move != 12 {
		t.Fatalf("doamin_1 move parse error")
	}

	// Answer1
	domain_2, move := toydns.DecodeCompressedDomain(response[44:], response)
	if domain_2 != "google.com" {
		t.Fatalf("doamin_2 parse error")
	}
	if move != 2 {
		t.Fatalf("doamin_1 move parse error")
	}

	// Answer2
	domain_3, move := toydns.DecodeCompressedDomain(response[44:], response)
	if domain_3 != "google.com" {
		t.Fatalf("doamin_3 parse error")
	}
	if move != 2 {
		t.Fatalf("doamin_3 move parse error")
	}

	// Answer3
	domain_4, move := toydns.DecodeCompressedDomain(response[60:], response)
	if domain_4 != "google.com" {
		t.Fatalf("doamin_4 parse error")
	}
	if move != 2 {
		t.Fatalf("doamin_4 move parse error")
	}
}

func TestGetATypeAnswer(t *testing.T) {
	response := []byte{
		// Header
		0x12, 0x34, // Transaction ID
		0x81, 0x80, // QR = 1 (Response), Standard Query
		0x00, 0x01, // QDCOUNT = 1
		0x00, 0x06, // ANCOUNT = 6
		0x00, 0x00, // NSCOUNT = 0
		0x00, 0x00, // ARCOUNT = 0

		// Question Section
		// Name: google.com
		0x06, 'g', 'o', 'o', 'g', 'l', 'e',
		0x03, 'c', 'o', 'm',
		0x00,       // End of domain
		0x00, 0x01, // QTYPE = A
		0x00, 0x01, // QCLASS = IN

		// Answer Section
		// 1
		0xC0, 0x0C, // Name (compress pointer to domain)
		0x00, 0x01, // Type = A
		0x00, 0x01, // Class = IN
		0x00, 0x00, 0x00, 0xB3, // TTL = 179
		0x00, 0x04, // RDLENGTH = 4
		0x8E, 0xFB, 0xAF, 0x64, // 142.251.175.100

		// 2
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x8B, // 142.251.175.139

		// 3
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x71, // 142.251.175.113

		// 4
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x66, // 142.251.175.102

		// 5
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x8A, // 142.251.175.138

		// 6
		0xC0, 0x0C,
		0x00, 0x01,
		0x00, 0x01,
		0x00, 0x00, 0x00, 0xB3,
		0x00, 0x04,
		0x8E, 0xFB, 0xAF, 0x65, // 142.251.175.101
	}
	offset := 28

	_, offset = toydns.GetATypeAnswer(response, offset)

	if offset != 44 {
		t.Fatalf("parse error")
	}

}
